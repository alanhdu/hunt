// Generated by CoffeeScript 1.7.1
var draw, getType, render, s;

s = "{{ arena | replace('\n', '\\n') }}";

s = s + "\n";

render = function(arena, scale) {
  var canvas, chr, context, height, width, x, y, _i, _len, _results;
  if (scale == null) {
    scale = 10;
  }
  width = arena.indexOf('\n');
  height = (arena.length + 1) / (width + 1);
  canvas = document.getElementById("game");
  context = canvas.getContext("2d");
  if (height * scale === canvas.height && width * scale === canvas.width) {
    context.clearRect(0, 0, canvas.width, canvas.height);
  } else {
    canvas.width = width * scale;
    canvas.height = height * scale;
    context.clearRect(0, 0, canvas.width, canvas.height);
  }
  x = 0;
  y = 0;
  context.fillStyle = "#000000";
  _results = [];
  for (_i = 0, _len = arena.length; _i < _len; _i++) {
    chr = arena[_i];
    switch (chr) {
      case '*':
        draw(x * scale, y * scale, scale, scale, getType(x, y, width, arena), context);
        _results.push(x += 1);
        break;
      case ' ':
        _results.push(x += 1);
        break;
      case '\n':
        y += 1;
        _results.push(x = 0);
        break;
      default:
        _results.push(void 0);
    }
  }
  return _results;
};

getType = function(x, y, width, arena) {
  var bot, dash, left, pipe, pos, right, top, w;
  w = width + 1;
  pos = w * y + x;
  top = pos - w;
  bot = pos + w;
  left = pos - 1;
  right = pos + 1;
  if (arena[left] === '*' || arena[right] === '*') {
    dash = true;
  }
  if (arena[top] === '*' || arena[bot] === '*') {
    pipe = true;
  }
  if (pipe && dash) {
    return 'plus';
  } else if (pipe) {
    return 'pipe';
  } else if (dash) {
    return 'dash';
  }
};

draw = function(x, y, width, height, type, context) {
  var h, w, x1, y1;
  if (type === 'plus') {
    draw(x, y, width, height, 'pipe', context);
    draw(x, y, width, height, 'dash', context);
    return;
  }
  switch (type) {
    case 'pipe':
      x1 = x + (width / 2) - 1;
      y1 = y;
      w = 2;
      h = height;
      break;
    case 'dash':
      x1 = x;
      y1 = y + (height / 2) - 1;
      w = width;
      h = 2;
  }
  return context.fillRect(x1, y1, w, h);
};

render(s);
