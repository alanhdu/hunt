// Generated by CoffeeScript 1.7.1
(function() {
  var socket;

  socket = io.connect();

  socket.on("error", (function(err) {
    return alert(err);
  }));

  socket.on("update", update);

  socket.on("acknowledged", function(info) {
    return window.uname = $("#username").val();
  });

  socket.on("disconnect", function() {
    window.uname = void 0;
    clear();
    document.getElementById("status").innerHTML = "Disconnected from server";
    return null;
  });

  $("#play").on("click", (function() {
    if (window.uname === void 0) {
      socket.emit('begin', {
        width: 51,
        height: 23,
        username: $("#username").val()
      });
    } else {
      alert("Already logged in!");
    }
    return null;
  }));

  window.onunload = (function(evt) {
    if (window.uname !== void 0) {
      socket.emit("logoff");
    }
    return null;
  });

  $(window).keydown((function(evt) {
    var chr, cloak, direction, fire, key, scan, type;
    if (evt.target.tagName.toLowerCase() === "input" || window.uname === void 0 || evt.ctrlKey) {
      return true;
    }
    key = evt.which;
    chr = String.fromCharCode(key);
    switch (chr) {
      case 'J':
        direction = 'v';
        break;
      case 'K':
        direction = '^';
        break;
      case 'L':
        direction = '>';
        break;
      case 'H':
        direction = '<';
        break;
      case 'F':
        fire = true;
        break;
      case 'S':
        scan = true;
        break;
      case 'C':
        cloak = true;
        break;
      default:
        return true;
    }
    evt.preventDefault();
    if (direction !== void 0) {
      if (evt.shiftKey) {
        type = "turn";
      } else {
        type = "move";
      }
      socket.emit(type, direction);
    } else if (fire) {
      if (evt.shiftKey) {
        type = "bomb";
      } else {
        type = "fire";
      }
      socket.emit(type);
    } else if (scan) {
      socket.emit("scan");
    } else if (cloak) {
      socket.emit("cloak");
    }
    return null;
  }));

}).call(this);
